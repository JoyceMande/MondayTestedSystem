@model SCRIPTERS.Core.Models.Operation.Order

    @{
        ViewBag.Title = "Create";
        if (User.IsInRole("Manager"))
        {
            Layout = "~/Views/Shared/_Layout.cshtml";
        }

        if (User.IsInRole("Employee"))
        {
            Layout = "~/Views/Shared/_Layout2.cshtml";
        }
    }

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <h4>Add Order Here</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderNumber , "Order Number", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.OrderNumber, new { htmlAttributes = new { Value = ViewBag.OrderCode, @readonly = "true", @class = "form-control", @id = "costField" } })
                        @Html.ValidationMessageFor(model => model.OrderNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("ItemName", "Name", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.DropDownList("ItemName", ViewBag.ItemId as SelectList, "Select One", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessage("ItemName", "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("ItemQuantity", "Quantity", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.Editor("ItemQuantity", new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessage("ItemQuantity", "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("ItemPrice", "Selling Price", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.Editor("ItemPrice", new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessage("ItemPrice", "", new { @class = "text-danger" })
                    </div>
                </div>
                @* Base selling price, purchase price must be below  this  *@
                @*<div class="form-group">
                        @Html.Label("ItemPrice", "Selling Price", htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-8">
                            @Html.Editor("ItemPrice", new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessage("ItemPrice", "", new {@class = "text-danger"})
                        </div>
                    </div>*@
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-8">
                        <input type="button" value="Add" id="AddButton" class="btn btn-info " />
                    </div>
                </div>
                <table class=" table table-responsive table-striped table-bordered table-hover table-condensed" id="Details">
                    <thead>
                        <tr>
                            <td>SL</td>
                            <td>Item</td>
                            <td>Quantity</td>
                            <td>Price</td>
                            <td>Line Price</td>
                            <td>Action</td>
                        </tr>
                    </thead>
                    <tbody id="OrderDetailsTable">
                        @if (Model != null && Model.OrderDetail != null && Model.OrderDetail.Count > 0)
                        {
                            var sl = 0;
                            foreach (var item in Model.OrderDetail)
                            {
                                <tr>
                                    <td>@(++sl)</td>
                                    <td>@item.ItemId</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.Price</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OutletId, "Outlet", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.OutletId, ViewBag.OutletId as SelectList, "Select One", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OutletId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.EmployeeId, ViewBag.EmployeeId as SelectList, "Select One", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { Id = "OrderDate", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Supplier, "Supplier", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.SupplierId, ViewBag.Supplier as SelectList, "Select One", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SupplierId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Total, new { htmlAttributes = new { Id = "Total", @class = "form-control", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DueAmount, "Amount Paid", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DueAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DueAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-success" />
                    </div>
                </div>
            </div>
        </div>
    }
    <div>
        @Html.ActionLink("Back to List", "List", "Orders")
    </div>

    @section scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script src="~/Scripts/ProjectScripts/Order/OrderCreate.js"></script>
    }
